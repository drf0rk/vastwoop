FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV ORT_TENSORRT_ENGINE_CACHE_ENABLE=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    python3-pip \
    python3-dev \
    ffmpeg \
    libsm6 \
    libxext6 \
    && rm -rf /var/lib/apt/lists/*

# Create and set working directory
WORKDIR /app

# Clone repository
RUN git clone https://github.com/drf0rk/vastwoop.git /app

# Install PyTorch first to ensure correct import order
RUN pip3 install --no-cache-dir torch==2.1.0+cu118 torchvision==0.16.0+cu118 --extra-index-url https://download.pytorch.org/whl/cu118

# Install ONNX Runtime after PyTorch
RUN pip3 install --no-cache-dir onnxruntime-gpu==1.16.3

# Create import helper
RUN echo '# Ensure torch is imported before onnxruntime\nimport os\nimport sys\n\n# Set environment variables\nos.environ["ORT_TENSORRT_ENGINE_CACHE_ENABLE"] = "1"\n\n# Import torch first\nimport torch\nprint(f"PyTorch {torch.__version__} loaded successfully")\n\n# Then import onnxruntime\nimport onnxruntime as ort\nprint(f"ONNX Runtime {ort.__version__} loaded successfully")\n\n# Export function to get optimal providers\ndef get_providers():\n    return ["CUDAExecutionProvider", "CPUExecutionProvider"] if torch.cuda.is_available() else ["CPUExecutionProvider"]\n\n__all__ = ["torch", "ort", "get_providers"]' > /app/import_helper.py

# Create requirements.txt with properly ordered dependencies
COPY requirements.txt /app/requirements.txt

# Install remaining requirements
RUN pip3 install -r requirements.txt
RUN pip3 install --upgrade gradio --force
RUN pip3 install --upgrade fastapi pydantic
RUN pip3 install "numpy<2.0"

# Fix run.py to ensure proper import order
RUN if [ -f /app/run.py ]; then \
    cp /app/run.py /app/run.py.bak && \
    sed -i '1s/^/# Import torch before onnxruntime\nfrom import_helper import torch, ort, get_providers\n\n/' /app/run.py; \
    fi

# Expose port for Gradio
EXPOSE 7860

# Create startup script
RUN echo '#!/bin/bash\npython3 /app/run.py "$@"' > /app/start.sh && \
    chmod +x /app/start.sh

# Command to run when container starts
ENTRYPOINT ["/app/start.sh"]
